---
title: "Tutorial"
---

## Requirements

### Environment
```{julia}
#| echo: false
#| eval: false

# #KEYNOTE: Use Quarto's include interface is much more direct to read external content and show it here.
# This block is just for references; you can freely delete this block whenever you want.
using Markdown, GEMSMagTIPDocumentation
open(dir_0("GEMS-MagTIP-insider/_environment.txt")) do str
    Markdown.parse(read(str, String))
end
```
{{< include "../GEMS-MagTIP-insider/_environment.txt" >}}


### Dependencies

GEMS-MagTIP depends on [okatsn/toolbox](https://github.com/okatsn/toolbox) and [CGRG-lab/GEMS-MagTIP-insider](https://github.com/CGRG-lab/GEMS-MagTIP-insider).

You have to add these dependencies to path every time before running your scripts, as follows

#### [CGRG-lab/GEMS-MagTIP-insider](https://github.com/CGRG-lab/GEMS-MagTIP-insider)

Copy [CGRG-lab/GEMS-MagTIP-insider](https://github.com/CGRG-lab/GEMS-MagTIP-insider) to your local drive (e.g., `GEMS-MagTIP-insider`) and add the source code inside to path:

```matlab
dir_src = 'GEMS-MagTIP-insider/src';
addpath(genpath(dir_src));
```


#### [okatsn/toolbox](https://github.com/okatsn/toolbox)

Copy [okatsn/toolbox](https://github.com/okatsn/toolbox) to the main directory (e.g., `GEMS-MagTIP-insider/toolbox`) and add the source code inside to path:

```matlab
dir_toolbox = 'GEMS-MagTIP-insider/toolbox';
addpath(genpath(dir_toolbox));
```


## Getting Started
The [main functions](../doc_library/index.qmd#main-functions) of GEMS-MagTIP take directories that contains intermediate data (those `.mat` files) as input arguments, and output data in the assigned directory. 

Here is the minimal example of the chain of main functions:

### Setting Up Directory Paths

Assigning directories for input/output data or variables is necessary before running any of the main function. 

For example:

```matlab
% For windows, use backslash `\`; for unix systems, use slash `/` in the path to directories.
dir_catalog = 'spreadsheet'; 
        % directory of event catalog & station location
dir_data = 'data/geomag_1'; 
        % directory of geomagnetic timeseries of "standard format"
dir_stat = 'output_var/StatisticIndex'; 
        % directory of statistic indices
dir_tsAIN = 'output_var/tsAIN'; 
        % directory for storing anomaly index number (AIN)
dir_molchan = 'output_var/Molchan'; 
        % directory for storing Molchan scores
dir_jointstation = 'output_var/JointStation'; 
        % directory for the time series of EQK, TIP and probability
```

::: {.callout-tip}
- You can use [`mkdir_default`](../doc_library/#mkdir_default) to automatically generate empty directories for main functions.
- You can use [`dirselectassign`](../doc_library/#dirselectassign) to assign directories via file explorer interface.
:::

::: {.callout-important}
- `dir_catalog` must contain `catalog.csv`/`catalog.mat` and `station_location.csv`/`station_location.mat`. 
- `dir_data` is the directory that contains GE or GM data of the standard format; see [`conv_geomagdata`](../doc_library/#conv_geomagdata) and [`conv_gemsdata`](../doc_library/#conv_gemsdata) for the conversion of raw data to the standard format.
:::

#### Earthquake catalog and station information

{{< include "../GEMS-MagTIP-insider/spreadsheet/README.md" >}}

The `station_location.csv` specifies the location of every station;
here is a partial view on `station_location.csv`: 

```{julia}
#| echo: false
using DataFrames, CSV, GEMSMagTIPDocumentation, PrettyTables
df = CSV.read(dir_0("GEMS-MagTIP-insider/spreadsheet/original_csv/station_location.csv"), DataFrame) 
pretty_table(df[16:end, :];max_num_of_rows = 8,backend = Val(:html), show_subheader= false)
```

### Executing Main Functions in the Correct Order

```matlab
statind(dir_data,dir_stat); 

anomalyind(dir_stat,dir_tsAIN); 

molscore(dir_tsAIN,dir_catalog,dir_molchan); 

molscore3(dir_tsAIN,dir_molchan,dir_catalog,dir_jointstation); 
```

::: {.callout-tip}
`statind`, `molscore`, and `molscore3` have alternatives which run the same calculation in parallel.
In most cases you can simply append `_parfor` (e.g., `molscore3_parfor(...) `) in the function name with no need to modify input arguments to do run in parallel. 
See [`statind_parfor`](../doc_library/#statind_parfor), [`molscore_parfor`](../doc_library/#molscore_parfor), and [`molscore3_parfor`](../doc_library/#molscore3_parfor).

:::

### Comprehensive Sample Script
Here is a sample script **"demo/demo_script.m"** for the whole process.

::: {.callout-tip}
You can run `startup0.m` and follows the instruction in the command window to add dependencies and assign input/output directories as described above.
:::

```matlab
{{< include "../GEMS-MagTIP-insider/demo/demo_script.m" >}}
```

